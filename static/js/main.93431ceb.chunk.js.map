{"version":3,"sources":["core/normalizeSenseData/normalizeSenseData.ts","types.d.ts","core/normalizeEntryData/normalizeEntryData.ts","core/normalizeWordData/normalizeWordData.ts","core/makeAnkiCard/makeAnkiCard.ts","utils/getCardsData/getCardsData.ts","utils/splitByWord/splitByWord.ts","utils/composeQuery/composeQuery.ts","utils/domify/domify.ts","utils/splitBySelector/splitBySelector.ts","utils/getTrimmedTextContent/getTrimmedTextContent.ts","core/extractHeadword/extractHeadword.ts","core/extractFrequency/extractFrequency.ts","core/extractPronunciation/extractPronunciation.ts","core/extractPartOfSpeech/extractPartOfSpeech.ts","core/extractExamples/extractExamples.ts","core/extractForm/extractForm.ts","core/composeExampleGroupData/composeExampleGroupData.ts","core/extractDefinition/extractDefinition.ts","core/extractSynonymOrAntonym/extractSynonymOrAntonym.ts","core/extractSituation/extractSituation.ts","core/extractGeography/extractGeography.ts","core/composeSenseData/composeSenseData.ts","core/composeEntryData/composeEntryData.ts","core/composeWordData/composeWordData.ts","utils/wordToData/wordToData.ts","utils/saveAnkiDeck/saveAnkiDeck.ts","utils/saveCsvFile/saveCsvFile.ts","utils/getCardsCount/getCardsCount.ts","components/Header/Header.tsx","utils/maybePluralize/maybePluralize.ts","components/DownloadSection/DownloadSection.tsx","components/WordsListItem/WordsListItem.tsx","utils/assertUnreachable/assertUnreachable.ts","components/ResultCards/ResultCards.tsx","components/UserWords/UserWords.tsx","components/DeckName/DeckName.tsx","components/App/App.tsx","serviceWorker.js","index.tsx"],"names":["WordFetchError","normalizeSenseData","wordData","entryData","senseData","headword","frequency","pronunciation","partOfSpeech","definition","situation","geography","synonym","antonym","examples","exampleGroups","subsenses","commonData","normalizeExample","form","example","cardsFromExamples","R","cardsFromExampleGroups","exampleGroup","map","cardsFromSubsenses","cardsFromDefinition","flattenDepth","normalizeEntryData","flattenDeep","senses","normalizeWordData","entries","join","makeAnkiCard","cardData","cardExample","cardDefinition","cardForm","cardMaybeSituation","cardMaybeGeography","cardMaybePronunciation","cardMaybeSynonym","cardMaybeAntonym","front","back","getCardsData","words","wordsFetchResult","reverse","word","filter","Array","isArray","reduce","allCardsData","currentWordCardsData","concat","splitByWord","length","someSymbolsDelete","fixDoubleSpaces","someSymbolsToHyphens","composeQuery","escapedWord","dictionaryUrl","domify","markup","wrapper","document","implementation","createHTMLDocument","createElement","innerHTML","splitBySelector","selector","onlyChildren","rootNode","from","children","node","matches","querySelectorAll","getTrimmedTextContent","element","textContent","trim","extractHeadword","pageMarkup","headwordNode","querySelector","extractFrequency","frequencyNode","extractPronunciation","entryMarkup","pronunciationWrapper","extractPartOfSpeech","partOfSpeechWrapper","removeGlossary","fixNewline","fixNbsp","fixDoubleSpace","fixSeparatedPeriod","cleanse","extractExamples","senseOrExampleGroupMarkup","extractForm","exampleGroupMarkup","composeExampleGroupData","extractDefinition","senseMarkup","definitionNodeMarkup","extractSynonymOrAntonym","whatToExtract","synonymOrAntonymWrapper","childNodes","Element","classList","contains","isBadgeNode","extractSynonym","extractAntonym","extractSituation","extractGeography","geographyNode","composeSenseData","composeEntryData","composeWordData","WordIsLoading","removeDoubleSpace","removeNewLines","normalizeMarkup","wordNotFound","wordToData","a","query","fetch","then","response","text","escapedMarkup","status","Offline","NotFound","payload","template","css","saveAnkiDeck","deckName","cards","body","JSON","stringify","method","headers","Headers","res","blob","saveAs","saveCsvFile","cardsData","csv","Parser","fields","withBOM","parse","Blob","type","getCardsCount","Object","values","totalCardsCount","currentWordCards","Header","href","bannerColor","Alert","severity","AlertTitle","PureComponent","maybePluralize","count","noun","suffix","DownloadSection","this","props","classes","onDownloadAnkiButtonClick","onDownloadCsvButtonClick","onClearWordsButtonClick","isLoading","wordsCount","cardsCount","wordsTotal","cardsTotal","Grid","container","spacing","item","xs","sm","md","className","totals","data-qa","Button","variant","onClick","disabled","fullWidth","color","polling","render","online","CircularProgress","leftIcon","size","withStyles","theme","createStyles","lineHeight","marginRight","WordsListItem","renderRow","TableRow","key","TableCell","renderTable","Table","TableHead","TableBody","renderDeleteButton","IconButton","onDeleteButtonClick","renderFetchedWord","ExpansionPanel","ExpansionPanelSummary","expandIcon","Tooltip","title","ExpansionPanelDetails","renderLoadingWord","thickness","renderFailedWord","icon","description","renderOfflineWord","renderNotFoundWord","renderNoCardsWord","fetchStatusOrCardData","x","Error","assertUnreachable","ResultCards","renderWord","UserWords","onChange","value","onKeyDown","onSubmit","TextField","id","label","placeholder","helperText","multiline","rowsMax","DeckName","App","useState","wordsInput","setWordsInput","setWords","setWordsFetchResult","setDeckName","isDeckBeingDownloaded","setIsDeckBeingDownloaded","useEffect","localStorage","error","console","handleOnline","useCallback","forEach","downloadAndSaveWordData","navigator","onLine","window","addEventListener","removeEventListener","handleWordsSubmit","event","preventDefault","newWords","prevWords","uniq","prevWordsFetchResult","handleDeleteButtonClick","wordToDelete","e","newWordsFetchResult","handleDeckNameChange","target","useMemo","handleDownloadAnkiButtonClick","ankiCards","catch","handleDownloadCsvButtonClick","handleClearWordsButtonClick","shiftKey","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","createMuiTheme","palette","primary","indigo","ReactDOM","getElementById","URL","process","origin","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.93431ceb.chunk.js","sourcesContent":["import * as R from 'ramda'\nimport flattenDepth from 'lodash/flattenDepth'\nimport {\n    WordData,\n    EntryData,\n    SenseData,\n    CardData,\n    ExampleGroup\n} from '../../types.d'\n\nconst normalizeSenseData = ({\n    wordData,\n    entryData\n}: {\n    wordData: WordData\n    entryData: EntryData\n}) => (senseData: SenseData): CardData[] => {\n    const { headword, frequency } = wordData\n    const { pronunciation, partOfSpeech } = entryData\n\n    const {\n        definition,\n        situation,\n        geography,\n        synonym,\n        antonym,\n        examples,\n        exampleGroups,\n        subsenses\n    } = senseData\n\n    const commonData = {\n        headword,\n        pronunciation,\n        partOfSpeech,\n        frequency,\n        definition,\n        situation,\n        geography,\n        synonym,\n        antonym\n    }\n\n    // normalize... functions\n\n    const normalizeExample = (form: string) => (example: string) => ({\n        ...commonData,\n        example,\n        form\n    })\n\n    const normalizeExampleGroup = (exampleGroup: ExampleGroup) => {\n        const { form, examples: exampleGroupExamples } = exampleGroup\n        const cards = exampleGroupExamples.map(normalizeExample(form))\n        return cards\n    }\n\n    // cards from different sources\n\n    const cardsFromExamples = R.map(normalizeExample(headword))(examples)\n\n    const cardsFromExampleGroups = R.map(normalizeExampleGroup)(exampleGroups)\n\n    const cardsFromSubsenses = R.map(\n        normalizeSenseData({ wordData, entryData })\n    )(subsenses)\n\n    const cardsFromDefinition =\n        R.all(R.isEmpty, [examples, exampleGroups, subsenses]) && definition\n            ? [{ ...commonData, form: headword, example: '' }]\n            : []\n\n    // all cards\n\n    const cards = flattenDepth(\n        [\n            cardsFromExamples,\n            cardsFromExampleGroups,\n            cardsFromSubsenses,\n            cardsFromDefinition\n        ],\n        2\n    )\n\n    return cards\n}\n\nexport default normalizeSenseData\n","export interface WordData {\n    headword: string\n    frequency: string\n    entries: EntryData[]\n}\n\nexport interface EntryData {\n    senses: SenseData[]\n    pronunciation: string\n    partOfSpeech: string\n}\n\nexport interface SenseData {\n    definition: string\n    situation: string\n    geography: string\n    synonym: string\n    antonym: string\n    examples: string[]\n    exampleGroups: ExampleGroup[]\n    subsenses: SenseData[]\n}\n\nexport interface ExampleGroup {\n    examples: string[]\n    form: string\n}\n\nexport interface CardData {\n    example: string\n    form: string\n    headword: string\n    pronunciation: string\n    partOfSpeech: string\n    frequency: string\n    definition: string\n    situation: string\n    geography: string\n    synonym: string\n    antonym: string\n}\n\nexport interface Card {\n    front: string\n    back: string\n}\n\ntype WordIsLoading = 'WORD IS LOADING'\nexport const WordIsLoading: WordIsLoading = 'WORD IS LOADING'\n\nexport enum WordFetchError {\n    NotFound = 'FETCH ERROR: NOT FOUND',\n    Offline = 'FETCH ERROR: OFFLINE'\n}\n\ntype WordFetchResult = WordIsLoading | WordFetchError | CardData[]\n","import * as R from 'ramda'\nimport normalizeSenseData from '../normalizeSenseData/normalizeSenseData'\nimport { WordData, EntryData } from '../../types.d'\nimport flattenDeep from 'lodash/flatten'\n\nconst normalizeEntryData = (wordData: WordData) => (entryData: EntryData) => {\n    const cards = flattenDeep(\n        R.map(normalizeSenseData({ wordData, entryData }))(entryData.senses)\n    )\n\n    return cards\n}\n\nexport default normalizeEntryData\n","import * as R from 'ramda'\nimport normalizeEntryData from '../normalizeEntryData/normalizeEntryData'\nimport { WordData } from '../../types.d'\nimport flattenDeep from 'lodash/flatten'\n\nconst normalizeWordData = (wordData: WordData) => {\n    const cards = R.pipe(\n        R.map(normalizeEntryData(wordData)),\n        flattenDeep\n    )(wordData.entries)\n\n    return cards\n}\n\nexport default normalizeWordData\n","import * as R from 'ramda'\nimport { CardData, Card } from '../../types.d'\n\nconst newLine = '<br>'\nconst verticalOffset = '<br><br>' // I don't use css-margins for offset, because I want cards to be styled \"out of box\", even without css styles\n\nconst join = R.join('')\n\nconst makeAnkiCard = (cardData: CardData): Card => {\n    const {\n        form,\n        definition,\n        example,\n        situation,\n        geography,\n        pronunciation,\n        synonym,\n        antonym\n    } = cardData\n\n    // card parts\n\n    const cardExample = `<span class=\"lta-example\">${example}</span>`\n\n    const cardDefinition = `<span class=\"lta-definition\">${definition}</span>`\n\n    const cardForm = `<span class=\"lta-form\">${form}</span>`\n\n    const cardMaybeSituation = situation\n        ? `${newLine}<span class=\"lta-situation\">(${situation})</span>`\n        : ''\n\n    const cardMaybeGeography = geography\n        ? `${newLine}<span class=\"lta-geography\">(${geography})</span>`\n        : ''\n\n    const cardMaybePronunciation = pronunciation\n        ? `${newLine}<span class=\"lta-pronunciation\">[${pronunciation}]</span>`\n        : ''\n\n    const cardMaybeSynonym = synonym\n        ? `${newLine}<span class=\"lta-synonym\">(synonym: ${synonym})</span>`\n        : ''\n\n    const cardMaybeAntonym = antonym\n        ? `${newLine}<span class=\"lta-antonym\">(antonym: ${antonym})</span>`\n        : ''\n\n    // card sides\n\n    const front = example\n        ? join([\n              cardExample,\n              cardMaybeSituation,\n              cardMaybeGeography,\n              verticalOffset,\n              cardForm,\n              cardMaybePronunciation\n          ])\n        : join([\n              cardDefinition,\n              cardMaybeSynonym,\n              cardMaybeAntonym,\n              cardMaybeSituation,\n              cardMaybeGeography\n          ])\n\n    const back = example\n        ? join([cardDefinition, cardMaybeSynonym, cardMaybeAntonym])\n        : join([cardForm, cardMaybePronunciation])\n\n    // card\n\n    const card = { front, back }\n\n    return card\n}\n\nexport default makeAnkiCard\n","import { WordFetchResult } from '../../types.d'\n\nconst getCardsData = (\n    words: string[],\n    wordsFetchResult: {\n        [key: string]: WordFetchResult\n    }\n) => {\n    const cardsData = words\n        .reverse()\n        .map(word => wordsFetchResult[word])\n        .filter(Array.isArray)\n        .reduce(\n            (allCardsData, currentWordCardsData) =>\n                currentWordCardsData\n                    ? allCardsData.concat(...currentWordCardsData)\n                    : allCardsData,\n            []\n        )\n\n    return cardsData\n}\n\nexport default getCardsData\n","import * as R from 'ramda'\n\nconst splitByWord = R.pipe(\n    R.split('\\n'),\n    R.map(R.toLower),\n    R.map(R.trim),\n    words => words.filter(word => word.length)\n)\n\nexport default splitByWord\n","import * as R from 'ramda'\n\nconst someSymbolsDelete = R.replace(/[(!?.,)]/g, '')\nconst fixDoubleSpaces = R.replace(/ {2}/g, ' ')\nconst someSymbolsToHyphens = R.replace(/[/ ’]/g, '-')\n\nconst composeQuery = (word: string) => {\n    const escapedWord = R.pipe(\n        R.toLower,\n        someSymbolsDelete,\n        R.trim,\n        fixDoubleSpaces,\n        someSymbolsToHyphens\n    )(word)\n\n    const dictionaryUrl = `https://www.ldoceonline.com/dictionary/${escapedWord}`\n\n    const queryUrl = `https://murmuring-tor-18986.fly.dev/${dictionaryUrl}`\n\n    return queryUrl\n}\n\nexport default composeQuery\n","const domify = (markup: string) => {\n    const wrapper = document.implementation\n        .createHTMLDocument()\n        .createElement('div')\n    wrapper.innerHTML = markup\n\n    return wrapper\n}\n\nexport default domify\n","import domify from '../domify/domify'\n\nconst splitBySelector = ({\n    selector,\n    onlyChildren = false\n}: {\n    selector: string\n    onlyChildren?: boolean\n}) => (markup: string) => {\n    const rootNode = domify(markup)\n\n    const markups = onlyChildren\n        ? Array.from(rootNode.children)\n              .filter(node => node.matches(selector))\n              .map(node => node.innerHTML)\n        : Array.from(rootNode.querySelectorAll(selector)).map(\n              node => node.innerHTML\n          )\n\n    return markups\n}\n\nexport default splitBySelector\n","const getTrimmedTextContent = (element: Element | null) => {\n    if (!element || !element.textContent) {\n        return ''\n    }\n\n    return element.textContent.trim()\n}\n\nexport default getTrimmedTextContent\n","import domify from '../../utils/domify/domify'\nimport getTrimmedTextContent from '../../utils/getTrimmedTextContent/getTrimmedTextContent'\n\nconst extractHeadword = (pageMarkup: string) => {\n    // I'm adding h1 in selector, because page has two .pagetitle elements, and one of them is span\n    // I'm adding entry_content in order to exclude pagetitle from https://www.ldoceonline.com/dictionary/\n    const headwordNode = domify(pageMarkup).querySelector(\n        '.entry_content h1.pagetitle'\n    )\n\n    const headword = getTrimmedTextContent(headwordNode)\n\n    return headword\n}\n\nexport default extractHeadword\n","import domify from '../../utils/domify/domify'\nimport getTrimmedTextContent from '../../utils/getTrimmedTextContent/getTrimmedTextContent'\n\nconst extractFrequency = (pageMarkup: string) => {\n    const frequencyNode = domify(pageMarkup).querySelector('.LEVEL')\n\n    if (!frequencyNode) {\n        return '○○○'\n    }\n\n    const frequency = getTrimmedTextContent(frequencyNode)\n\n    return frequency\n}\n\nexport default extractFrequency\n","import domify from '../../utils/domify/domify'\nimport getTrimmedTextContent from '../../utils/getTrimmedTextContent/getTrimmedTextContent'\n\nconst extractPronunciation = (entryMarkup: string) => {\n    const pronunciationWrapper = domify(entryMarkup).querySelector('.PronCodes')\n\n    if (!pronunciationWrapper) {\n        return ''\n    }\n\n    const pronunciation = Array.from(\n        pronunciationWrapper.querySelectorAll('.PRON, .AMEVARPRON')\n    )\n        .map(getTrimmedTextContent)\n        .join(' ')\n\n    return pronunciation\n}\n\nexport default extractPronunciation\n","import domify from '../../utils/domify/domify'\nimport getTrimmedTextContent from '../../utils/getTrimmedTextContent/getTrimmedTextContent'\n\nconst extractPartOfSpeech = (entryMarkup: string) => {\n    const partOfSpeechWrapper = domify(entryMarkup).querySelector('.POS')\n\n    if (!partOfSpeechWrapper) {\n        return ''\n    }\n\n    const partOfSpeech = getTrimmedTextContent(partOfSpeechWrapper)\n\n    return partOfSpeech\n}\n\nexport default extractPartOfSpeech\n","import * as R from 'ramda'\nimport domify from '../../utils/domify/domify'\nimport splitBySelector from '../../utils/splitBySelector/splitBySelector'\n\nconst removeGlossary = R.replace(/\\(=.*\\)/g, '')\nconst fixNewline = R.replace(/\\n/g, ' ')\nconst fixNbsp = R.replace(/&nbsp;/g, ' ')\nconst fixDoubleSpace = R.replace(/\\s{2,}/g, ' ')\nconst fixSeparatedPeriod = R.replace(/ \\./g, '.')\n\nconst cleanse = R.pipe(\n    removeGlossary,\n    fixNewline,\n    fixNbsp,\n    fixDoubleSpace,\n    fixSeparatedPeriod,\n    R.trim\n)\n\nconst extractExamples = (senseOrExampleGroupMarkup: string) => {\n    const examples = R.pipe(\n        splitBySelector({ selector: '.EXAMPLE', onlyChildren: true }),\n        R.map(\n            R.pipe(\n                domify,\n                R.propOr('', 'textContent'),\n                cleanse\n            )\n        )\n    )(senseOrExampleGroupMarkup)\n\n    return examples\n}\n\nexport default extractExamples\n","import domify from '../../utils/domify/domify'\nimport getTrimmedTextContent from '../../utils/getTrimmedTextContent/getTrimmedTextContent'\n\nconst formClasses = '.PROPFORM, .PROPFORMPREP, .COLLO, .LINKWORD, .LEXUNIT'\n\nconst extractForm = (exampleGroupMarkup: string) => {\n    const form = Array.from(\n        domify(exampleGroupMarkup).querySelectorAll(formClasses)\n    )\n        .map(getTrimmedTextContent)\n        .join(' ')\n\n    return form\n}\n\nexport default extractForm\n","import extractExamples from '../extractExamples/extractExamples'\nimport extractForm from '../extractForm/extractForm'\n\nconst composeExampleGroupData = (exampleGroupMarkup: string) => {\n    const form = extractForm(exampleGroupMarkup)\n    const examples = extractExamples(exampleGroupMarkup)\n\n    const exampleGroupData = {\n        form,\n        examples\n    }\n\n    return exampleGroupData\n}\n\nexport default composeExampleGroupData\n","import * as R from 'ramda'\nimport splitBySelector from '../../utils/splitBySelector/splitBySelector'\nimport domify from '../../utils/domify/domify'\nimport getTrimmedTextContent from '../../utils/getTrimmedTextContent/getTrimmedTextContent'\n\nconst extractDefinition = (senseMarkup: string) => {\n    const definitionNodeMarkup = splitBySelector({\n        selector: '.DEF',\n        onlyChildren: true\n    })(senseMarkup)[0]\n\n    if (!definitionNodeMarkup) {\n        return ''\n    }\n\n    const definition = R.pipe(\n        domify,\n        getTrimmedTextContent\n    )(definitionNodeMarkup)\n\n    return definition\n}\n\nexport default extractDefinition\n","import * as R from 'ramda'\nimport domify from '../../utils/domify/domify'\n\n// badge with text \"SYN\" or \"OPP\"\nconst isBadgeNode = (node: Node) =>\n    node instanceof Element && node.classList.contains('synopp')\n\nconst extractSynonymOrAntonym = (whatToExtract: string) => (\n    senseMarkup: string\n) => {\n    const synonymOrAntonymWrapper = domify(senseMarkup).querySelector(\n        whatToExtract === 'synonym' ? '.SYN' : '.OPP'\n    )\n\n    if (!synonymOrAntonymWrapper) {\n        return ''\n    }\n\n    const synonymOrAntonym = Array.from(synonymOrAntonymWrapper.childNodes)\n        .filter(node => !isBadgeNode(node))\n        .map(R.prop('textContent'))\n        .join(' ')\n        .trim()\n\n    return synonymOrAntonym\n}\n\nexport const extractSynonym = extractSynonymOrAntonym('synonym')\nexport const extractAntonym = extractSynonymOrAntonym('antonym')\n","import domify from '../../utils/domify/domify'\nimport getTrimmedTextContent from '../../utils/getTrimmedTextContent/getTrimmedTextContent'\n\nconst extractSituation = (senseMarkup: string) => {\n    const situation = Array.from(\n        domify(senseMarkup).querySelectorAll('.REGISTERLAB')\n    )\n        .map(getTrimmedTextContent)\n        .join(' ')\n\n    return situation\n}\n\nexport default extractSituation\n","import domify from '../../utils/domify/domify'\nimport getTrimmedTextContent from '../../utils/getTrimmedTextContent/getTrimmedTextContent'\n\nconst extractGeography = (senseMarkup: string) => {\n    const geographyNode = domify(senseMarkup).querySelector('.GEO')\n\n    const geography = getTrimmedTextContent(geographyNode)\n\n    return geography\n}\n\nexport default extractGeography\n","import * as R from 'ramda'\nimport splitBySelector from '../../utils/splitBySelector/splitBySelector'\nimport composeExampleGroupData from '../composeExampleGroupData/composeExampleGroupData'\nimport extractDefinition from '../extractDefinition/extractDefinition'\nimport {\n    extractSynonym,\n    extractAntonym\n} from '../extractSynonymOrAntonym/extractSynonymOrAntonym'\nimport extractSituation from '../extractSituation/extractSituation'\nimport extractGeography from '../extractGeography/extractGeography'\nimport extractExamples from '../extractExamples/extractExamples'\n\nimport { SenseData } from '../../types.d'\n\nconst composeSenseData = (senseMarkup: string): SenseData => {\n    const definition = extractDefinition(senseMarkup)\n    const situation = extractSituation(senseMarkup)\n    const geography = extractGeography(senseMarkup)\n    const synonym = extractSynonym(senseMarkup)\n    const antonym = extractAntonym(senseMarkup)\n    const examples = extractExamples(senseMarkup)\n    const exampleGroups = R.pipe(\n        splitBySelector({\n            selector: '.ColloExa, .GramExa',\n            onlyChildren: true\n        }),\n        R.map(composeExampleGroupData)\n    )(senseMarkup)\n    const subsenses = R.pipe(\n        splitBySelector({ selector: '.Subsense' }),\n        R.map(composeSenseData)\n    )(senseMarkup)\n\n    const senseData = {\n        definition,\n        situation,\n        geography,\n        synonym,\n        antonym,\n        examples,\n        exampleGroups,\n        subsenses\n    }\n\n    return senseData\n}\n\nexport default composeSenseData\n","import * as R from 'ramda'\nimport extractPronunciation from '../extractPronunciation/extractPronunciation'\nimport extractPartOfSpeech from '../extractPartOfSpeech/extractPartOfSpeech'\nimport composeSenseData from '../composeSenseData/composeSenseData'\nimport splitBySelector from '../../utils/splitBySelector/splitBySelector'\n\nconst composeEntryData = (entryMarkup: string) => {\n    const pronunciation = extractPronunciation(entryMarkup)\n    const partOfSpeech = extractPartOfSpeech(entryMarkup)\n    const senses = R.pipe(\n        splitBySelector({ selector: '.Sense' }),\n        R.map(composeSenseData)\n    )(entryMarkup)\n\n    const entryData = {\n        senses,\n        pronunciation,\n        partOfSpeech\n    }\n\n    return entryData\n}\n\nexport default composeEntryData\n","import * as R from 'ramda'\nimport splitBySelector from '../../utils/splitBySelector/splitBySelector'\nimport extractHeadword from '../extractHeadword/extractHeadword'\nimport extractFrequency from '../extractFrequency/extractFrequency'\nimport composeEntryData from '../composeEntryData/composeEntryData'\n\nconst composeWordData = (pageMarkup: string) => {\n    const headword = extractHeadword(pageMarkup)\n    const frequency = extractFrequency(pageMarkup)\n    const entries = R.pipe(\n        splitBySelector({ selector: '.ldoceEntry' }),\n        R.map(composeEntryData)\n    )(pageMarkup)\n\n    const wordData = {\n        headword,\n        frequency,\n        entries\n    }\n\n    return wordData\n}\n\nexport default composeWordData\n","import * as R from 'ramda'\nimport composeQuery from '../composeQuery/composeQuery'\nimport composeWordData from '../../core/composeWordData/composeWordData'\nimport extractHeadword from '../../core/extractHeadword/extractHeadword'\nimport { WordFetchError } from '../../types.d'\n\nconst removeDoubleSpace = R.replace(/ {2}/gm, ' ')\nconst removeNewLines = R.replace(/\\n/gm, ' ')\nconst normalizeMarkup = R.pipe(\n    removeNewLines,\n    removeDoubleSpace\n)\n\nconst wordNotFound = (markup: string) => extractHeadword(markup) === ''\n\nconst wordToData = async (word: string) => {\n    let escapedMarkup\n\n    try {\n        const query = composeQuery(word)\n        escapedMarkup = await fetch(query).then(response => response.text())\n    } catch (error) {\n        return { status: WordFetchError.Offline }\n    }\n\n    const markup = normalizeMarkup(escapedMarkup)\n\n    if (wordNotFound(markup)) {\n        return { status: WordFetchError.NotFound }\n    } else {\n        const wordData = composeWordData(markup)\n        return { payload: wordData }\n    }\n}\n\nexport { normalizeMarkup }\nexport default wordToData\n","import { saveAs } from 'file-saver'\nimport { Card } from '../../types.d'\n\nconst template = {\n    css: `\n            .card { font-family: arial; font-size: 20px; text-align: center; color: black; background-color: white; }\n            .lta-example { font-style: italic; } \n            .lta-form { font-weight: bold; }\n        `\n}\n\nconst saveAnkiDeck = (deckName: string, cards: Card[]) =>\n    fetch(\n        'https://murmuring-tor-18986.fly.dev/https://vercel-anki-deck.now.sh/api/create',\n        {\n            body: JSON.stringify({ cards, deckName, template }),\n            method: 'POST',\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            })\n        }\n    )\n        .then(res => res.blob())\n        .then(blob => saveAs(blob, `${deckName}.apkg`))\n\nexport default saveAnkiDeck\n","import { saveAs } from 'file-saver'\nimport { Parser } from 'json2csv'\nimport { CardData } from '../../types'\n\nconst saveCsvFile = (deckName: string, cardsData: CardData[]) => {\n    const json2csvParser = new Parser({\n        fields: [\n            'headword',\n            'form',\n            'example',\n            'definition',\n            'pronunciation',\n            'partOfSpeech',\n            'situation',\n            'geography',\n            'synonym',\n            'antonym',\n            'frequency'\n        ],\n        withBOM: true\n    })\n    const csv = json2csvParser.parse(cardsData)\n    const blob = new Blob([csv], { type: 'text/csv' })\n\n    saveAs(blob, `${deckName}.csv`)\n}\n\nexport default saveCsvFile\n","import { WordFetchResult } from '../../types.d'\n\nconst getCardsCount = (wordsFetchResult: {\n    [key: string]: WordFetchResult\n}) => {\n    const cardsCount = Object.values(wordsFetchResult)\n        .filter(Array.isArray)\n        .reduce((totalCardsCount, currentWordCards) => {\n            return (\n                totalCardsCount +\n                (currentWordCards ? currentWordCards.length : 0)\n            )\n        }, 0)\n\n    return cardsCount\n}\n\nexport default getCardsCount\n","import { Alert, AlertTitle } from '@material-ui/lab'\nimport React, { PureComponent } from 'react'\nimport GithubCorner from 'react-github-corner'\n\nexport default class Header extends PureComponent {\n    render() {\n        return (\n            <>\n                <GithubCorner\n                    href=\"https://github.com/yakhinvadim/longman-to-anki\"\n                    bannerColor=\"#3f51b5\"\n                />\n                <Alert severity=\"info\">\n                    <AlertTitle>\n                        👋 Hi! I'm Vadim, the creator of Longman to Anki. I have\n                        a favor to ask.\n                    </AlertTitle>\n                    <br />I recently started a new project called{' '}\n                    <strong>The News Minimalist</strong>, aimed at helping\n                    people stay informed without feeling overwhelmed. Every day,\n                    I use ChatGPT to analyze the top 1000 news stories and\n                    select the most important ones. Then, I send a summary email\n                    to my subscribers.\n                    <br />\n                    <br />\n                    If you're interested, please{' '}\n                    <a href=\"https://www.newsminimalist.com/subscribe\">\n                        support me by subscribing\n                    </a>\n                    ! And if you like it, please share it with your friends!\n                    <br />\n                    <br />\n                    Thank you!\n                </Alert>\n                <header>\n                    <h1>Longman to Anki</h1>\n                    <p>A web app to help you learn English with Anki</p>\n                </header>\n            </>\n        )\n    }\n}\n","const maybePluralize = (count: number, noun: string, suffix = 's') =>\n    `${count} ${noun}${count !== 1 ? suffix : ''}`\n\nexport default maybePluralize\n","import React, { PureComponent } from 'react'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport CloudOff from '@material-ui/icons/CloudOff'\nimport { withStyles, WithStyles, Theme, createStyles } from '@material-ui/core'\nimport { Detector } from 'react-detect-offline'\nimport maybePluralize from '../../utils/maybePluralize/maybePluralize'\nimport Grid from '@material-ui/core/Grid'\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        totals: {\n            lineHeight: '36px'\n        },\n        leftIcon: {\n            marginRight: theme.spacing(1)\n        }\n    })\n\ninterface Props extends WithStyles<typeof styles> {\n    onDownloadAnkiButtonClick: (e: React.MouseEvent) => void\n    onDownloadCsvButtonClick: (e: React.MouseEvent) => void\n    onClearWordsButtonClick: (e: React.MouseEvent) => void\n    isLoading: boolean\n    wordsCount: number\n    cardsCount: number\n}\n\nclass DownloadSection extends PureComponent<Props> {\n    render() {\n        const {\n            classes,\n            onDownloadAnkiButtonClick,\n            onDownloadCsvButtonClick,\n            onClearWordsButtonClick,\n            isLoading,\n            wordsCount,\n            cardsCount\n        } = this.props\n\n        const wordsTotal = maybePluralize(wordsCount, 'word')\n        const cardsTotal = maybePluralize(cardsCount, 'card')\n\n        return (\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={12} md={12}>\n                    <div\n                        className={classes.totals}\n                        data-qa=\"download-section__totals\"\n                    >{`${wordsTotal}, ${cardsTotal}`}</div>\n                </Grid>\n\n                <Grid item container xs={12} spacing={1} sm={12} md={12}>\n                    <Grid item xs={12} sm={4}>\n                        <Button\n                            variant=\"outlined\"\n                            onClick={onClearWordsButtonClick}\n                            disabled={!cardsCount}\n                            fullWidth\n                            color=\"secondary\"\n                        >\n                            Clear words\n                        </Button>\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                        <Button\n                            variant=\"outlined\"\n                            onClick={onDownloadCsvButtonClick}\n                            disabled={!cardsCount}\n                            fullWidth\n                        >\n                            Download CSV\n                        </Button>\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                        <Detector\n                            polling={false}\n                            render={({ online }: { online: boolean }) => (\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={onDownloadAnkiButtonClick}\n                                    disabled={!cardsCount || !online}\n                                    color=\"primary\"\n                                    fullWidth\n                                >\n                                    {online ? (\n                                        isLoading ? (\n                                            <>\n                                                <CircularProgress\n                                                    className={classes.leftIcon}\n                                                    color=\"inherit\"\n                                                    size={24}\n                                                />\n                                                Preparing your&nbsp;deck\n                                            </>\n                                        ) : (\n                                            <>\n                                                <CloudDownloadIcon\n                                                    className={classes.leftIcon}\n                                                />\n                                                Download anki&nbsp;deck\n                                            </>\n                                        )\n                                    ) : (\n                                        <>\n                                            <CloudOff\n                                                className={classes.leftIcon}\n                                            />\n                                            No internet connection\n                                        </>\n                                    )}\n                                </Button>\n                            )}\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default withStyles(styles)(DownloadSection)\n","import React, { PureComponent } from 'react'\n\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport IconButton from '@material-ui/core/IconButton'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport Clear from '@material-ui/icons/Clear'\nimport CloudOff from '@material-ui/icons/CloudOff'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport assertUnreachable from '../../utils/assertUnreachable/assertUnreachable'\n\nimport {\n    WordIsLoading,\n    WordFetchError,\n    CardData,\n    WordFetchResult\n} from '../../types.d'\n\nimport './WordsListItem.css'\n\ninterface Props {\n    word: string\n    fetchStatusOrCardData: WordFetchResult\n    onDeleteButtonClick: (word: string) => (e: React.MouseEvent) => void\n}\n\nexport default class WordsListItem extends PureComponent<Props> {\n    renderRow = (cardData: CardData) => (\n        <TableRow key={cardData.example + cardData.definition}>\n            <TableCell className=\"WordsListItem__tableCell\">\n                {cardData.form}\n            </TableCell>\n            <TableCell className=\"WordsListItem__tableCell\">\n                {cardData.example || '—'}\n            </TableCell>\n            <TableCell className=\"WordsListItem__tableCell\">\n                {cardData.definition}\n            </TableCell>\n            <TableCell className=\"WordsListItem__tableCell\">\n                {cardData.pronunciation || '—'}\n            </TableCell>\n            <TableCell className=\"WordsListItem__tableCell\">\n                {cardData.partOfSpeech || '—'}\n            </TableCell>\n            <TableCell className=\"WordsListItem__tableCell\">\n                {cardData.situation || '—'}\n            </TableCell>\n            <TableCell className=\"WordsListItem__tableCell\">\n                {cardData.geography || '—'}\n            </TableCell>\n            <TableCell className=\"WordsListItem__tableCell\">\n                {cardData.synonym || '—'}\n            </TableCell>\n            <TableCell className=\"WordsListItem__tableCell\">\n                {cardData.antonym || '—'}\n            </TableCell>\n        </TableRow>\n    )\n\n    renderTable = (cardsData: CardData[]) => (\n        <div className=\"WordsListItem__tableWrapper\">\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell className=\"WordsListItem__tableHeadCell\">\n                            Form\n                        </TableCell>\n                        <TableCell className=\"WordsListItem__tableHeadCell\">\n                            Example\n                        </TableCell>\n                        <TableCell className=\"WordsListItem__tableHeadCell\">\n                            Definition\n                        </TableCell>\n                        <TableCell className=\"WordsListItem__tableHeadCell\">\n                            Pronunciation\n                        </TableCell>\n                        <TableCell className=\"WordsListItem__tableHeadCell\">\n                            Part of speech\n                        </TableCell>\n                        <TableCell className=\"WordsListItem__tableHeadCell\">\n                            Situation\n                        </TableCell>\n                        <TableCell className=\"WordsListItem__tableHeadCell\">\n                            Geography\n                        </TableCell>\n                        <TableCell className=\"WordsListItem__tableHeadCell\">\n                            Synonym\n                        </TableCell>\n                        <TableCell className=\"WordsListItem__tableHeadCell\">\n                            Antonym\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>{cardsData.map(this.renderRow)}</TableBody>\n            </Table>\n        </div>\n    )\n\n    renderDeleteButton = (word: string) => (\n        <IconButton\n            className=\"WordsListItem__delete\"\n            onClick={this.props.onDeleteButtonClick(word)}\n            data-qa=\"words-list-item__delete\"\n        >\n            <DeleteIcon />\n        </IconButton>\n    )\n\n    renderFetchedWord = (cardsData: CardData[]) => (\n        <ExpansionPanel\n            className=\"WordsListItem__listItem\"\n            key={`${cardsData[0].headword} loaded`}\n        >\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <div className=\"WordsListItem__header\">\n                    <Tooltip\n                        title={\n                            <>\n                                ●●● – indicates the top 3000 words\n                                <br />\n                                ●●○ – indicates the next most important 3000\n                                words\n                                <br />\n                                ●○○ – indicates the less frequent yet important\n                                3000 words\n                                <br />\n                                ○○○ – indicates other words\n                            </>\n                        }\n                    >\n                        <div className=\"WordsListItem__icon\">\n                            {cardsData[0].frequency}\n                        </div>\n                    </Tooltip>\n                    <div className=\"WordsListItem__word\">\n                        <span data-qa=\"words-list-item__fetched-word\">\n                            {cardsData[0].headword}\n                        </span>\n                        &nbsp;\n                        <span className=\"WordsListItem__counter\">\n                            ({cardsData.length})\n                        </span>\n                    </div>\n                    <div className=\"WordsListItem__description\">\n                        {cardsData[0].definition}\n                    </div>\n                    {this.renderDeleteButton(this.props.word)}\n                </div>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                {this.renderTable(cardsData)}\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    )\n\n    renderLoadingWord = () => (\n        <ExpansionPanel\n            className=\"WordsListItem__listItem\"\n            key={`${this.props.word} load`}\n        >\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <div className=\"WordsListItem__header\">\n                    <div className=\"WordsListItem__icon\">\n                        <CircularProgress size={24} thickness={2} />\n                    </div>\n                    <div\n                        className=\"WordsListItem__word\"\n                        data-qa=\"words-list-item__loading-word\"\n                    >\n                        {this.props.word}\n                    </div>\n                    <div className=\"WordsListItem__description\">...</div>\n                    {this.renderDeleteButton(this.props.word)}\n                </div>\n            </ExpansionPanelSummary>\n        </ExpansionPanel>\n    )\n\n    renderFailedWord = (\n        word: string,\n        icon: JSX.Element,\n        description: string\n    ) => (\n        <ExpansionPanel\n            className=\"WordsListItem__listItem\"\n            key={`${word} fail`}\n        >\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <div className=\"WordsListItem__header\">\n                    <div className=\"WordsListItem__icon\">{icon}</div>\n                    <div className=\"WordsListItem__word\">{word}</div>\n                    <div className=\"WordsListItem__description\">\n                        {description}\n                    </div>\n                    {this.renderDeleteButton(word)}\n                </div>\n            </ExpansionPanelSummary>\n        </ExpansionPanel>\n    )\n\n    renderOfflineWord = () =>\n        this.renderFailedWord(\n            this.props.word,\n            <CloudOff />,\n            'No internet connection. The word will be loaded when you are back online'\n        )\n\n    renderNotFoundWord = () =>\n        this.renderFailedWord(this.props.word, <Clear />, 'Word not found')\n\n    renderNoCardsWord = () =>\n        this.renderFailedWord(\n            this.props.word,\n            <Clear />,\n            'Word exists, but cards not found (we do not make cards from Business Dictionary)'\n        )\n\n    render() {\n        const { fetchStatusOrCardData } = this.props\n\n        if (fetchStatusOrCardData === WordIsLoading) {\n            return this.renderLoadingWord()\n        } else if (fetchStatusOrCardData === WordFetchError.Offline) {\n            return this.renderOfflineWord()\n        } else if (fetchStatusOrCardData === WordFetchError.NotFound) {\n            return this.renderNotFoundWord()\n        } else if (Array.isArray(fetchStatusOrCardData)) {\n            if (fetchStatusOrCardData.length === 0) {\n                return this.renderNoCardsWord()\n            } else {\n                return this.renderFetchedWord(fetchStatusOrCardData)\n            }\n        } else {\n            assertUnreachable(fetchStatusOrCardData)\n        }\n    }\n}\n","export default function assertUnreachable(x: never): never {\n    throw new Error(\"Didn't expect to get here\")\n}\n","import React, { PureComponent } from 'react'\nimport WordsListItem from '../WordsListItem/WordsListItem'\n\nimport { WordFetchResult } from '../../types.d'\n\ninterface Props {\n    words: string[]\n    wordsFetchResult: {\n        [key: string]: WordFetchResult\n    }\n    onDeleteButtonClick: (word: string) => (e: React.MouseEvent) => void\n}\n\nexport default class ResultCards extends PureComponent<Props> {\n    renderWord = (word: string) => (\n        <WordsListItem\n            key={word}\n            fetchStatusOrCardData={this.props.wordsFetchResult[word]}\n            word={word}\n            onDeleteButtonClick={this.props.onDeleteButtonClick}\n        />\n    )\n\n    render() {\n        return <>{this.props.words.map(this.renderWord)}</>\n    }\n}\n","import React, { PureComponent } from 'react'\nimport TextField from '@material-ui/core/TextField'\n\ninterface Props {\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n    onKeyDown: (e: React.KeyboardEvent) => void\n    onSubmit: (e: React.FormEvent) => void\n    value: string\n}\nexport default class UserWords extends PureComponent<Props> {\n    render() {\n        const { onChange, value, onKeyDown, onSubmit } = this.props\n\n        return (\n            <form onSubmit={onSubmit}>\n                <TextField\n                    id=\"user-words\"\n                    label=\"Type the word, you want to learn\"\n                    placeholder=\"example\"\n                    helperText=\"You can enter several words. Type one word per line using 'Shift + Enter' to add new lines\"\n                    variant=\"outlined\"\n                    fullWidth\n                    multiline\n                    rowsMax={20}\n                    value={value}\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    data-qa=\"user-words\"\n                />\n            </form>\n        )\n    }\n}\n","import React, { PureComponent } from 'react'\nimport TextField from '@material-ui/core/TextField'\n\ninterface Props {\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n    value: string\n}\n\nexport default class DeckName extends PureComponent<Props> {\n    render() {\n        const { onChange, value } = this.props\n\n        return (\n            <TextField\n                id=\"deck-name\"\n                label=\"Deck name\"\n                helperText=\"You can add “::” to create a nested deck. For example: English::Words\"\n                variant=\"outlined\"\n                value={value}\n                onChange={onChange}\n                fullWidth\n            />\n        )\n    }\n}\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport uniq from 'lodash/uniq'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport normalizeWordData from '../../core/normalizeWordData/normalizeWordData'\nimport makeAnkiCard from '../../core/makeAnkiCard/makeAnkiCard'\nimport getCardsData from '../../utils/getCardsData/getCardsData'\nimport splitByWord from '../../utils/splitByWord/splitByWord'\nimport wordToData from '../../utils/wordToData/wordToData'\nimport saveAnkiDeck from '../../utils/saveAnkiDeck/saveAnkiDeck'\nimport saveCsvFile from '../../utils/saveCsvFile/saveCsvFile'\nimport getCardsCount from '../../utils/getCardsCount/getCardsCount'\n\nimport Header from '../Header/Header'\nimport DownloadSection from '../DownloadSection/DownloadSection'\nimport ResultCards from '../ResultCards/ResultCards'\nimport UserWords from '../UserWords/UserWords'\nimport DeckName from '../DeckName/DeckName'\n\nimport { WordIsLoading, WordFetchError, WordFetchResult } from '../../types.d'\n\nimport './App.css'\n\nfunction App() {\n    const [wordsInput, setWordsInput] = useState('')\n    const [words, setWords] = useState([] as string[])\n    const [wordsFetchResult, setWordsFetchResult] = useState({} as {\n        [key: string]: WordFetchResult\n    })\n    const [deckName, setDeckName] = useState('English words')\n    const [isDeckBeingDownloaded, setIsDeckBeingDownloaded] = useState(false)\n\n    useEffect(() => {\n        try {\n            if (localStorage.words) {\n                setWords(JSON.parse(localStorage.words))\n            }\n            if (localStorage.wordsFetchResult) {\n                setWordsFetchResult(JSON.parse(localStorage.wordsFetchResult))\n            }\n            if (localStorage.deckName) {\n                setDeckName(JSON.parse(localStorage.deckName))\n            }\n        } catch (error) {\n            console.error(error)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.words = JSON.stringify(words)\n    }, [words])\n\n    useEffect(() => {\n        localStorage.wordsFetchResult = JSON.stringify(wordsFetchResult)\n    }, [wordsFetchResult])\n\n    useEffect(() => {\n        localStorage.deckName = JSON.stringify(deckName)\n    }, [deckName])\n\n    const handleOnline = useCallback(() => {\n        words\n            .filter(word => wordsFetchResult[word] === WordFetchError.Offline)\n            .forEach(downloadAndSaveWordData)\n    }, [words, wordsFetchResult])\n\n    useEffect(() => {\n        if (navigator.onLine) {\n            handleOnline()\n        }\n    }, [handleOnline])\n\n    useEffect(() => {\n        window.addEventListener('online', handleOnline)\n        return () => window.removeEventListener('online', handleOnline)\n    }, [handleOnline])\n\n    const handleWordsInputChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setWordsInput(event.target.value)\n    }\n\n    const handleEnterPress = (event: React.KeyboardEvent) => {\n        if (event.key === 'Enter' && event.shiftKey === false) {\n            event.preventDefault()\n            handleWordsSubmit(event)\n        }\n    }\n\n    const handleWordsSubmit = (event: React.FormEvent) => {\n        event.preventDefault()\n\n        const newWords = splitByWord(wordsInput)\n        newWords.forEach(downloadAndSaveWordData)\n\n        setWordsInput('')\n        setWords(prevWords => uniq([...newWords, ...prevWords]))\n    }\n\n    const downloadAndSaveWordData = async (word: string) => {\n        setWordsFetchResult(prevWordsFetchResult => ({\n            ...prevWordsFetchResult,\n            [word]: WordIsLoading\n        }))\n\n        const wordData = await wordToData(word)\n\n        setWordsFetchResult(prevWordsFetchResult => ({\n            ...prevWordsFetchResult,\n            [word]: wordData.status || normalizeWordData(wordData.payload)\n        }))\n    }\n\n    const handleDeleteButtonClick = useCallback(\n        (wordToDelete: string) => (e: React.MouseEvent) => {\n            setWordsFetchResult(prevWordsFetchResult => {\n                const newWordsFetchResult = { ...prevWordsFetchResult }\n                delete newWordsFetchResult[wordToDelete]\n                return newWordsFetchResult\n            })\n\n            setWords(prevWords =>\n                prevWords.filter(word => word !== wordToDelete)\n            )\n        },\n        []\n    )\n\n    const handleDeckNameChange = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            setDeckName(event.target.value)\n        },\n        []\n    )\n\n    const cardsCount = useMemo(() => getCardsCount(wordsFetchResult), [\n        wordsFetchResult\n    ])\n\n    const handleDownloadAnkiButtonClick = useCallback(() => {\n        setIsDeckBeingDownloaded(true)\n\n        const ankiCards = getCardsData(words, wordsFetchResult).map(\n            makeAnkiCard\n        )\n\n        saveAnkiDeck(deckName, ankiCards)\n            .then(() => {\n                setIsDeckBeingDownloaded(false)\n            })\n            .catch(console.error)\n    }, [deckName, words, wordsFetchResult])\n\n    const handleDownloadCsvButtonClick = useCallback(() => {\n        const cardsData = getCardsData(words, wordsFetchResult)\n\n        saveCsvFile(deckName, cardsData)\n    }, [deckName, words, wordsFetchResult])\n\n    const handleClearWordsButtonClick = useCallback(() => {\n        setWords([])\n        setWordsFetchResult({})\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Header />\n                </Grid>\n\n                <Grid item xs={12}>\n                    <UserWords\n                        value={wordsInput}\n                        onChange={handleWordsInputChange}\n                        onKeyDown={handleEnterPress}\n                        onSubmit={handleWordsSubmit}\n                    />\n                </Grid>\n\n                <Grid item xs={12}>\n                    <ResultCards\n                        words={words}\n                        wordsFetchResult={wordsFetchResult}\n                        onDeleteButtonClick={handleDeleteButtonClick}\n                    />\n                </Grid>\n\n                <Grid item xs={12}>\n                    <DeckName\n                        value={deckName}\n                        onChange={handleDeckNameChange}\n                    />\n                </Grid>\n\n                <Grid item xs={12}>\n                    <DownloadSection\n                        onDownloadAnkiButtonClick={\n                            handleDownloadAnkiButtonClick\n                        }\n                        onDownloadCsvButtonClick={handleDownloadCsvButtonClick}\n                        onClearWordsButtonClick={handleClearWordsButtonClick}\n                        isLoading={isDeckBeingDownloaded}\n                        cardsCount={cardsCount}\n                        wordsCount={words.length}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport indigo from '@material-ui/core/colors/indigo'\nimport './index.css'\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: indigo\n    }\n})\n\nconst MainPage = () => (\n    <MuiThemeProvider theme={theme}>\n        <App />\n    </MuiThemeProvider>\n)\n\nReactDOM.render(<MainPage />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}